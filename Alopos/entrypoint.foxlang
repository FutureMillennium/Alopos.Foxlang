
const STACK {
	Address4 BASE = 2M; // @TODO better address? align 4k
}

const OS {
	String NAME = "Alopos";
	VERSION {
		Uint MAJOR = 0;
		Uint MINOR = 1;
	}
}

Multiboot {
	Byte4 magic;
	//MultibootInfo info; // @TODO
}


function EntryPoint() {
	Cli();
	%esp = STACK.BASE;
	
	Multiboot.magic = %eax; // %eax should contain the Multiboot bootloader magic number
	//Multiboot.info = (MultibootInfo)%ebx; // %ebx should contain a pointer to the Multiboot information // @TODO
	
	//GDT.Init(); // @TODO
	//IDT.Init(); // interrupts, exceptions and IRQ // @TODO
	CmdLine.Init();
	
	//CmdLine.StartFromCursor(); // @TODO
	CmdLine.colour.foreground = White;
	CmdLine.Echo(#Compose("\n% %.%\n", OS.NAME, OS.VERSION.MAJOR, OS.VERSION.MINOR));
	
	//@section Tests:

	if Multiboot.magic != MultibootInfo.BOOTLOADER_MAGIC {
		EchoWarning("Warning: System not started correctly. System may not work. (Code: 0x%x)\n", Multiboot.magic);
	}

	// Bits 4 and 5 are mutually exclusive!
	if MultibootInfo.FlagCheck(Multiboot.info.flags, 4)
		&& MultibootInfo.FlagCheck(Multiboot.info.flags, 5) {
			EchoWarning("Warning: Both Multiboot bits 4 and 5 are set.\n");
			// @TODO error?
	}
	
	CmdLine.colour.SetDefault();

	CmdLine.Echo("Type 'help' for a list of commands.\n");

	/*CommandInput();

	.InputLoop:
		Hlt();

		if (isAcceptCommand) {
			CommandTryAccept();
		}

		goto .InputLoop;*/
	
	//@section kernel panic
	// @TODO kernel panic
	.Hang:
		Cli();
		Hlt();
		Jmp(.Hang);
}

function EchoWarning(String warning) {
	CmdLine.colour.foreground = Red;
	CmdLine.Echo(warning);
}
