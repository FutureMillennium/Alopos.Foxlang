
namespace CmdLine:

//@section consts

const MAX {
	Index COLS = 80;
	Index ROWS = 25;
}

// @TODO monochrome monitors at 0xB0000?
// @TODO is it always 0xB8000?
const Byte Pointer screenBuffer = 0xB8000; // VGA text mode 3 video buffer address


//@section defs

/*enum Bit4 Color4b {
	Black = 0,
	Blue = 1,
	Green = 2,
	Cyan = 3,
	Red = 4,
	Magenta = 5,
	Brown = 6,
	LightGrey = 7,
	DarkGrey = 8,
	LightBlue = 9,
	LightGreen = 10,
	LightCyan = 11,
	LightRed = 12,
	LightMagenta = 13,
	LightBrown = 14,
	White = 15,
}*/

// @TODO
/*struct Byte2 Entry @packed {
	Color color;
	Char char;
}*/


//@section vars

Current {
	Index /*{0 .. < MAX.COL * MAX.ROW}*/ position = 0; // @TODO range
	//const Color color = @; // @TODO
	const Byte color = 0x87;
}

//Byte2 ioPort; // base IO port for video (VGA), usually 0x3D4 // @TODO


//@section

// @TODO
/*function Init() { //@entry

	ioPort = valueof 0x0463; // @TODO always at 0x0463?

	OutB(ioPort, 0x0A); // Cursor Start Register
	Cursor.startRegister = InB(ioPort + 1);
}*/

// @TODO
/*function PutEntry(Char character, Color color, Index x, Index y) {
	const Index index = y * MAX.COLS + x;
	screenBuffer[index] = Entry(character, color);
}*/

// @TODO
/*function NewLine() {
	Current.col = 0;
	Current.row++;
	if (Current.row == MAX.ROWS) {
		Current.row = 0;
		// @TODO scroll screen
	}

	// clear line
	for Index i = 0 .. < MAX.COLS {
		PutEntry(0, Current.color, i, Current.row);
	}
}*/

// @TODO
/*function Backspace() {
	Current.col--;
	PutEntry(0, Current.color, Current.col, Current.row);
}*/

function PutChar(Char character) {
	// @TODO
	/*if (character == '\n') {
		NewLine();
	} else {*/
		//screenBuffer[Current.position] = Entry(Current.color, character);
		screenBuffer[Current.position] = Current.color;
		screenBuffer[Current.position + 1] = character;
		Current.position += 2;
		/*if Current.position >= MAX.COLS * MAX.ROWS { // @TODO
			Current.position = 0;
		}*/
	/*}*/
}

// @TODO rewrite for String
// Echo("Foo"); // "Foo"
// Echo("Foo", "bar"); // "Foobar"
// Echo("String: %s", "foo");
// Echo("String: %s", "foo", "\nAnd another: %s", "bar");
function Echo(String text) {
	Char Pointer c = text;
	
	while valueof c != 0 {
		PutChar(valueof c);
		c++;
	}
}
/*function Echo(String text, ...) {
	Char c = text[0];
	
	if c == '%' {
		c++;
		
		switch c {
			case _'%' { //%% = %
				PutChar(c);
			}
			case _'i' //%i
			case _'u' //%u
			case _'x' //%x
			case _'b' //%b
			{
				Char[17] buffer;
			}
			case _'s' {
				
			}
			else {
				
			}
		}
	} else {
		PutChar(c);
	}
}*/
/*function Echo(const char* text, ...) {

	char** args = (char **)&text;
	char* arg = *args;

	char c;

	while ((c = *arg++) != 0) {
		if (c == '%') {
			c = *arg++;
			char* tmp;

			switch (c) {
				case '%':
					PutChar(c);
					break;

				case 'i': // signed int
				case 'u': // unsigned int
				case 'x': // hex
				case 'b': // binary
				{
					char buffer[17];
					args++;
					NumberToString(*(int*)args, buffer, c);
					tmp = buffer;
					goto echoString;
				}
				break;

				case 's':
					args++;
					tmp = *args;

				echoString:
					while (*tmp)
						PutChar(*tmp++);
					break;
			}
			tmp = arg;
			if (*tmp++ == '%' && *tmp == 0) { // go to next string
				args++;
				arg = *args;
			}

		} else {
			PutChar(c);
		}
	}
}*/

// @TODO
/*function SetPositionToCursor() {
	Byte2 pos;

	OutB(ioPort, 0x0e);
	pos = InB(ioPort + 1) << 8;
	OutB(ioPort, 0x0f);
	pos |= InB(ioPort + 1);
	
	Current.row = pos % MAX.COLS;
	Current.col = pos / MAX.COLS;
}*/
